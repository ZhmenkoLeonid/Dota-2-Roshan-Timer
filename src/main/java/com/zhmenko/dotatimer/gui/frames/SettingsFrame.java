package com.zhmenko.dotatimer.gui.frames;

import com.jgoodies.forms.layout.CellConstraints;
import com.jgoodies.forms.layout.FormLayout;
import com.zhmenko.dotatimer.gui.listeners.*;
import com.zhmenko.dotatimer.gui.settings.documents.JTextFieldLimit;
import com.zhmenko.dotatimer.gui.listeners.*;
import com.zhmenko.dotatimer.setting.Config;
import com.zhmenko.dotatimer.setting.ConfigProperties;
import lombok.SneakyThrows;
import lombok.extern.slf4j.Slf4j;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

@Slf4j
public class SettingsFrame extends JFrame implements ActionListener {
    private JTextArea beforeAegisTextArea;
    private JTextField beforeAegisTextField;
    private JTextArea beforeLeftRoshanBorderTextArea;
    private JTextField beforeLeftRoshanBorderTextField;
    private JTextArea beforeRightRoshanBorderTextArea;
    private JTextField beforeRightRoshanBorderTextField;
    private JCheckBox usingColonCheckBox;
    private JTextArea executeKeyTextArea;
    private ExampleTextArea exampleOutputTextArea;
    private JTextField executeKeyTextField;
    private JTextArea exampleOutputTextAreaTitle;
    private JButton acceptButton;
    private JPanel settingsPanel;

    private Config config;
    private ConfigProperties currentConfigProperties;

    public SettingsFrame(Config config) {
        this.config = config;
        Dimension frameDimension = new Dimension(406, 350);
        setMinimumSize(frameDimension);
        setPreferredSize(frameDimension);
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        setLocation((screenSize.width - frameDimension.width) / 2, (screenSize.height - frameDimension.height) / 2);
        setResizable(false);
        add(settingsPanel);

        this.acceptButton.setActionCommand("Accept");
        this.acceptButton.addActionListener(this);

        this.currentConfigProperties = new ConfigProperties(config.getConfigProperties());
        this.exampleOutputTextArea.updateTextAreaText(currentConfigProperties);

        this.beforeAegisTextField.setText(config.getConfigProperties().getStringBeforeAegisExpiredTime());
        this.beforeAegisTextField
                .getDocument()
                .addDocumentListener(new BeforeAegisTextFieldActionListener(currentConfigProperties, exampleOutputTextArea));

        this.beforeLeftRoshanBorderTextField.setText(currentConfigProperties.getStringBeforeRoshanRecoveryLeftTime());
        this.beforeLeftRoshanBorderTextField
                .getDocument()
                .addDocumentListener(new BeforeLeftRoshanTextFieldActionListener(currentConfigProperties, exampleOutputTextArea));

        this.beforeRightRoshanBorderTextField.setText(currentConfigProperties.getStringBeforeRoshanRecoveryRightTime());
        this.beforeRightRoshanBorderTextField
                .getDocument()
                .addDocumentListener(new BeforeRightRoshanTextFieldActionListener(currentConfigProperties, exampleOutputTextArea));

        this.usingColonCheckBox.setSelected(currentConfigProperties.isUsingColon());
        this.usingColonCheckBox.addActionListener(new UsingColonCheckBoxActionListener(currentConfigProperties, exampleOutputTextArea));


        executeKeyTextField.setDocument(new JTextFieldLimit(1));
        Character execChar = currentConfigProperties.getExecChar();
        this.executeKeyTextField.setText(execChar == null ? null : execChar.toString());
        this.executeKeyTextField
                .getDocument()
                .addDocumentListener(new ExecCharacterTextFieldActionListener(currentConfigProperties));
    }

    @SneakyThrows
    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getActionCommand().equals("Accept")) {
            config.setConfigProperties(currentConfigProperties);
            config.writeConfigToFile();
        }
        log.debug("Saving config: " + config.getConfigProperties().toString());
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        settingsPanel = new JPanel();
        settingsPanel.setLayout(new FormLayout("fill:d:grow,left:4dlu:noGrow,fill:d:grow,left:4dlu:noGrow,fill:d:grow,left:4dlu:noGrow,fill:d:grow,left:4dlu:noGrow,fill:d:grow,left:4dlu:noGrow,fill:d:grow,left:4dlu:noGrow,fill:d:grow,left:4dlu:noGrow,fill:d:grow,left:4dlu:noGrow,fill:d:grow,left:4dlu:noGrow,fill:d:grow", "center:d:noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:d:grow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:d:grow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:d:grow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:d:grow,top:4dlu:noGrow,center:d:grow,top:4dlu:noGrow,center:max(d;4px):noGrow"));
        beforeAegisTextArea = new JTextArea();
        beforeAegisTextArea.setEditable(false);
        beforeAegisTextArea.setEnabled(true);
        beforeAegisTextArea.setForeground(new Color(-12236470));
        beforeAegisTextArea.setOpaque(false);
        beforeAegisTextArea.setText("Текст до таймера аегиса");
        CellConstraints cc = new CellConstraints();
        settingsPanel.add(beforeAegisTextArea, cc.xyw(1, 1, 19, CellConstraints.FILL, CellConstraints.FILL));
        beforeAegisTextField = new JTextField();
        beforeAegisTextField.setText("");
        settingsPanel.add(beforeAegisTextField, cc.xyw(1, 3, 19, CellConstraints.FILL, CellConstraints.DEFAULT));
        beforeLeftRoshanBorderTextArea = new JTextArea();
        beforeLeftRoshanBorderTextArea.setEditable(false);
        beforeLeftRoshanBorderTextArea.setOpaque(false);
        beforeLeftRoshanBorderTextArea.setText("Текст до левой границы появления рошана");
        settingsPanel.add(beforeLeftRoshanBorderTextArea, cc.xyw(1, 5, 19, CellConstraints.FILL, CellConstraints.FILL));
        beforeLeftRoshanBorderTextField = new JTextField();
        settingsPanel.add(beforeLeftRoshanBorderTextField, cc.xyw(1, 7, 19, CellConstraints.FILL, CellConstraints.DEFAULT));
        beforeRightRoshanBorderTextArea = new JTextArea();
        beforeRightRoshanBorderTextArea.setEditable(false);
        beforeRightRoshanBorderTextArea.setOpaque(false);
        beforeRightRoshanBorderTextArea.setText("Текст до правой границы появления рошана");
        settingsPanel.add(beforeRightRoshanBorderTextArea, cc.xyw(1, 9, 19, CellConstraints.FILL, CellConstraints.FILL));
        beforeRightRoshanBorderTextField = new JTextField();
        settingsPanel.add(beforeRightRoshanBorderTextField, cc.xyw(1, 11, 19, CellConstraints.FILL, CellConstraints.DEFAULT));
        executeKeyTextArea = new JTextArea();
        executeKeyTextArea.setEditable(false);
        executeKeyTextArea.setOpaque(false);
        executeKeyTextArea.setText("Выбор клавиши для выполнения");
        settingsPanel.add(executeKeyTextArea, cc.xyw(1, 15, 19, CellConstraints.FILL, CellConstraints.FILL));
        acceptButton = new JButton();
        acceptButton.setText("Принять");
        settingsPanel.add(acceptButton, cc.xy(19, 23));
        exampleOutputTextAreaTitle = new JTextArea();
        exampleOutputTextAreaTitle.setEditable(false);
        exampleOutputTextAreaTitle.setOpaque(false);
        exampleOutputTextAreaTitle.setText("Пример вывода");
        settingsPanel.add(exampleOutputTextAreaTitle, cc.xyw(1, 19, 19, CellConstraints.FILL, CellConstraints.FILL));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        settingsPanel.add(spacer1, cc.xy(1, 23, CellConstraints.FILL, CellConstraints.DEFAULT));
        exampleOutputTextArea = new ExampleTextArea();
        exampleOutputTextArea.setEditable(false);
        settingsPanel.add(exampleOutputTextArea, cc.xyw(1, 21, 19, CellConstraints.FILL, CellConstraints.FILL));
        usingColonCheckBox = new JCheckBox();
        usingColonCheckBox.setOpaque(false);
        usingColonCheckBox.setText("Использовать двоеточие");
        settingsPanel.add(usingColonCheckBox, cc.xy(1, 13));
        executeKeyTextField = new JTextField();
        executeKeyTextField.setColumns(2);
        executeKeyTextField.setEditable(true);
        executeKeyTextField.setHorizontalAlignment(0);
        executeKeyTextField.setText("");
        settingsPanel.add(executeKeyTextField, cc.xyw(1, 17, 5, CellConstraints.LEFT, CellConstraints.FILL));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return settingsPanel;
    }

}
